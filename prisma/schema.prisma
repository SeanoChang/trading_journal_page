// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  trades        Trade[]
  journalEntries JournalEntry[]
}

enum Role {
  USER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Comment {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Post {
  id        Int      @id @default(autoincrement())
  pairId    String
  title     String
  content   String
  authorId  String
  createdAt DateTime @default(now())
  comments  Comment[] 
}

model Trade {
  id            String    @id @default(cuid())
  userId        String
  pair          String
  orderStatus   OrderStatus
  side          Side
  
  // Plan ahead fields
  limitPrice    Float?
  takeProfit    Float?
  stopLoss      Float?
  
  // Executed trade fields
  entryPrice    Float?
  exitPrice     Float?
  entryTime     DateTime?
  exitTime      DateTime?
  
  // Calculated fields
  pnl           Float?
  winLoss       WinLoss?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  journalEntries JournalEntry[]
}

enum OrderStatus {
  PLAN_AHEAD
  OPEN
  EXECUTED
}

enum Side {
  BUY
  SELL
}

enum WinLoss {
  WIN
  LOSS
  BREAKEVEN
}

model JournalEntry {
  id          String   @id @default(cuid())
  userId      String
  date        DateTime @default(now())
  title       String?
  content     String?  @db.Text
  
  // Optional metadata
  mood        Mood?
  confidence  Int?     // 1-10 scale
  winRate     Float?   // Daily win rate percentage
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags        JournalTag[]
  setups      Setup[]
  trades      Trade[]
  
  @@index([userId, date])
}

model JournalTag {
  id            String         @id @default(cuid())
  name          String         @unique
  color         String?        @default("#3B82F6")
  
  // Relations
  journalEntries JournalEntry[]
  
  @@index([name])
}

model Setup {
  id            String         @id @default(cuid())
  name          String         @unique // e.g., "setup", "momentum", "rsi", "liquidity"
  description   String?
  
  // Relations
  journalEntries JournalEntry[]
  
  @@index([name])
}

// Enums
enum Mood {
  VERY_NEGATIVE
  NEGATIVE  
  NEUTRAL
  POSITIVE
  VERY_POSITIVE
}